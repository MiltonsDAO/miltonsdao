import { Networks } from './blockchain'

const BSC_MAINNET = {
  // jes 0x3E921a39b4D224596E4a130be690Da3c85bcF861
  // dai 0xa76cfDbEdF7883428B0e847AC354DeBA21B58CfC
  // sMLS 0x1af5a01Ec47D3092Bd63f5Ef8b5a0b6376245E94
  // test 0x2f4dB2564f1399678cc4d1F583aDC9b69936AE34
  // treasury 0x87e4E6655AE0A7a1F576E96Cd844620b77aDD5e8
  // olympusBondingCalculator 0xF4d46fAc3ad21B9F11427f169b939B366Ddfba6f
  // distributor 0x6e540b04BFa462B290C1d66cd403BB3118F35823
  // staking 0xa483923988B8283DE9e00b34db92bC5B018C7b57
  // stakingWarmup 0xeA8a261b2A8B9edb645881659039de0Ac997e20d
  // stakingHelper 0x5E91CDe2040cAaC04292359c5cee25451d42AF4a
  // daiBond 0x435De2e8782E6ECB6fBDDe3C876f75FC2DC52642
  DAO_ADDRESS: '0x389c5D2064Ec4e2408b414f286F1580F60E69089',
  OHM_ADDRESS: '0xa513E6E4b8f2a923D98304ec87F64353C4D5C853',
  DAI_ADDRESS: '0xc362B3ed5039447dB7a06F0a3d0bd9238E74d57c',
  sOHM_ADDRESS: '0x8A791620dd6260079BF849Dc5567aDC3F2FdC318',
  PMLS_ADDRESS: "0xEfF46346a988b1D80010702eb232Fc077EEfF452",

  TREASURY_ADDRESS: '0x610178dA211FEF7D417bC0e6FeD39F05609AD788',
  STAKING_ADDRESS: '0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82',
  STAKING_HELPER_ADDRESS: '0x0B306BF915C4d645ff596e518fAf3F9669b97016',
  OHM_BONDING_CALC_ADDRESS: '0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e',
  ZAPIN_ADDRESS: '0x7C488C807eFD61929D2c330e949a06Cc638fC748',
  WMEMO_ADDRESS: '0x0da67235dD5787D67955420C84ca1cEcd4E5Bb3b',

  IDO_ADDRESS: '0x5B611c2935BB1c1fBE231292eDB02774425D4821',
  IDO_CLAIM: '0xaDE4900349Ff75B0F5616fD0117a809287b435BF',
  JESECO_ADDRESS: '0xd23867E8a3Cc7E1E5ff9A4Ec5D250E73cBc5bf37',
  JESTOKEN_ADDRESS: '0x99CC7d620C2ac60b9dDb34e11F347Ea48F0a63f0',
  LPToken: '0x7f5289ca688433e283da8df76Efee6Fa54e65317',
}

const BSC_TESTNET = {
  DAO_ADDRESS: "0x389c5D2064Ec4e2408b414f286F1580F60E69089",
  PMLS_ADDRESS: "0xEfF46346a988b1D80010702eb232Fc077EEfF452",
  PMLSMigration_ADDRESS: "0x0536B6aB665deb1cea72ffeF2854bBa16D0e56bE",
  OHM_ADDRESS: "0xBF6d78d31daC1292E1bAc4e29A3cFC82623Eb23a",
  DAI_ADDRESS: "0xc362B3ed5039447dB7a06F0a3d0bd9238E74d57c",
  sOHM_ADDRESS: "0xd4763FDa1BA60742762a17b6b1Dc4EEF2a510A2b",
  TREASURY_ADDRESS: "0xae35022C7C2d1064763B9410b28214E51d077E9d",
  STAKING_ADDRESS: "0xa98b9BE87F9bCA74d5Dbe9eBB443Ea7c2d804886",
  STAKING_HELPER_ADDRESS: "0x17097d8ce89e34796A38ff643ccbd5FFE6A38356",
  OHM_BONDING_CALC_ADDRESS: "0x400125c51ADc7799df58780C3C30312862e45C55",
  ZAPIN_ADDRESS: "0x7C488C807eFD61929D2c330e949a06Cc638fC748",
  WMEMO_ADDRESS: "0x0da67235dD5787D67955420C84ca1cEcd4E5Bb3b",

}

const HARDHAT = {
  PMLS_ADDRESS: "0xEfF46346a988b1D80010702eb232Fc077EEfF452",

  DAO_ADDRESS: "0x389c5D2064Ec4e2408b414f286F1580F60E69089",
  OHM_ADDRESS: "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
  DAI_ADDRESS: "0xc362B3ed5039447dB7a06F0a3d0bd9238E74d57c",
  sOHM_ADDRESS: "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
  REFERRAL_ADDRESS: "0x4d40bc51f3BbDBB4826F71c3B11339F5fBBC044B",
  TREASURY_ADDRESS: "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
  STAKING_ADDRESS: "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
  STAKING_HELPER_ADDRESS: "0x0B306BF915C4d645ff596e518fAf3F9669b97016",
  OHM_BONDING_CALC_ADDRESS: "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
  ZAPIN_ADDRESS: "0x7C488C807eFD61929D2c330e949a06Cc638fC748",
  WMEMO_ADDRESS: "0x0da67235dD5787D67955420C84ca1cEcd4E5Bb3b",
}
const AVAX_TESTNET = {
  PMLS_ADDRESS: "0xEfF46346a988b1D80010702eb232Fc077EEfF452",

  DAO_ADDRESS: "0x389c5D2064Ec4e2408b414f286F1580F60E69089",
  OHM_ADDRESS: "0x20aeDae6d129282f4dee895DB4499ed1cd851147",
  DAI_ADDRESS: "0xc362B3ed5039447dB7a06F0a3d0bd9238E74d57c",
  sOHM_ADDRESS: "0xA8fAe49d168DB58E81A54564313250D23B0400cD",
  REFERRAL_ADDRESS: "0x4d40bc51f3BbDBB4826F71c3B11339F5fBBC044B",
  TREASURY_ADDRESS: "0x5f74393BB31D437c44A4Ce615dE30B12EbF87781",
  STAKING_ADDRESS: "0x31BE4cE673Dd983fC9Fd91F80eAC54b4cB9CAB63",
  STAKING_HELPER_ADDRESS: "0xbb042194cCD02488073eb6CFCd581f0Bf67CC243",
  OHM_BONDING_CALC_ADDRESS: "0x1552fc71e90a0C297B582A45E328ac5bbA2A92a8",
  ZAPIN_ADDRESS: "0x7C488C807eFD61929D2c330e949a06Cc638fC748",
  WMEMO_ADDRESS: "0x0da67235dD5787D67955420C84ca1cEcd4E5Bb3b",
}
export const getAddresses = (networkID: number) => {
  if (networkID === Networks.BSC) return BSC_MAINNET
  else if (networkID === Networks.BSC_TESTNET) return BSC_TESTNET
  else if (networkID === Networks.AVAX_TESTNET) return AVAX_TESTNET
  else if (networkID === Networks.HARDHAT) return HARDHAT
  throw Error("Network don't support")
}
